import { faker } from "@faker-js/faker";
import { expect, test } from "@playwright/test";

import { hardwareCatalogPage } from "../../pageobjects/hardwareCatalog.po";
import { HomePage } from "../../pageobjects/homePageRefactored.po";
import { PdmPage } from "../../pageobjects/pdm.po";
test.describe.serial("Component and Tree Details to Catalog", () => {
  const workspaceName = "AutomatedTest_" + faker.internet.userName();
  let wsId: string | undefined;
  test.beforeEach(async ({ page }) => {
    const homePage = new HomePage(page);
    wsId = await homePage.openUrlAndCreateTestWorkspace(workspaceName);
  });

  test("Verify that PDM various sections details and edits are working. @smokeTest", async ({ page }) => {
    const homePage = new HomePage(page);
    const hardwareCatalog = new hardwareCatalogPage(page);
    const pdmPage = new PdmPage(page);
    
    // Navigate to Hardware Catalog
    await homePage.clickHardwareCatalog();
    
    // Add new catalog item
    await hardwareCatalog.clickAddNewCatalog();
    
    // Complete CAD upload and basic editing workflow
    await pdmPage.completeCadUploadAndEditWorkflow(
      "Cube.SLDASM",
      "test",
      "Test Part",
      "Test",
      "45",
      "78",
      "45",
      "23"
    );

    // Additional verification for attachments and relations
    const fileName = "Cube.SLDASM";
    
    // Verify attachment details
    await page.locator("span").filter({ hasText: fileName }).first().click();
    await expect(page.getByLabel("Attachment details:").getByText(fileName, { exact: true })).toBeVisible();
    await expect(page.getByText("model/solidworks")).toBeVisible();
    await expect(page.getByRole("heading", { name: "Attachment details:" })).toBeVisible();
    await page.getByLabel("Attachment details: Cube.").getByLabel("Close").click();

    // Verify versions and relations
    await page.getByRole("heading", { name: "Versions" }).click();
    await page.getByText("Versions1").click();
    await page.getByRole("heading", { name: "Relations" }).click();
    await expect(page.getByTestId("rf__wrapper").locator("div").filter({ hasText: "Test Part" }).nth(1)).toBeVisible();

    // Cleanup - Delete the hardware catalog entries generated by test
    const textValues = ["Test Part", "front-2", "right2-3", "right2-4", "front-4", "top-2", "top-3"];
    await hardwareCatalog.searchAndDeleteCatalogHardwareValues(textValues);
  });
  test.afterEach(async ({ page }) => {
    // Note: Using original homePage for cleanup until deleteWorkspaceByID is added to refactored version
    const { homePage: originalHomePage } = await import("../../pageobjects/homePage.po");
    const cleanupHomePage = new originalHomePage(page);
    if (wsId) {
      await cleanupHomePage.deleteWorkspaceByID(wsId);
    }
  });
});
