import { faker } from "@faker-js/faker";
import { expect, Locator, test } from "@playwright/test";

import { hardwareCatalogPage } from "../../pageobjects/hardwareCatalog.po";
import { homePage } from "../../pageobjects/homePage.po";
test.describe.serial("Add Catalog via CAD file", () => {
  const workspaceName = "AutomatedTest_" + faker.internet.userName();
  let wsId: string | undefined;
  test.beforeEach(async ({ page }) => {
    const b2bSaasHomePage = new homePage(page);
    wsId = await b2bSaasHomePage.openUrlAndCreateTestWorkspace(workspaceName);
  });

  test("Verify that CAD upload method for Hardware Catalog works. @prod @smokeTest", async ({ page }) => {
    const hardwareCatalog = new hardwareCatalogPage(page);

    const b2bSaasHomePage = new homePage(page);
    await b2bSaasHomePage.clickHardwareCatalog();

    // Add Catalog Item
    await hardwareCatalog.clickAddNewCatalog();

    // Attach CAD file
    await page.getByTestId("button_set-catalog-item-dialog-mode_cad").click();
    await page.getByLabel("Add catalog item").getByRole("textbox").setInputFiles("./resources/Cube.SLDASM");
    await page.waitForSelector("text=Importing file...", { state: "hidden", timeout: 60000 });
    await expect(page.locator(".file-panel--file").getByText("Cube.SLDASM")).toBeVisible();
    await page.getByTestId("button_cad-submit-catalog-item").click();

    // Verify that success message is displayed
    await expect(await page.getByText("Successfully started catalog")).toBeVisible();

    // check if the conversion is successful
    const importFile = "Importing file...";
    await page.waitForSelector(`text=${importFile}`, { state: "hidden", timeout: 400000 });
    const importFileLabel: Locator = page.locator(`text=${importFile}`);
    await importFileLabel.isHidden();

    // Search for the some records and verify their presence
    const hardwareValue = "front-2";
    await page.getByPlaceholder("Search").click();
    await page.getByPlaceholder("Search").fill(hardwareValue);
    await expect(page.getByRole("gridcell", { name: "" + hardwareValue + "" }).first()).toBeVisible();

    // Click UI options and verify the thumbnail is displayed
    const thumbnail = await page.locator('[class*="pdmThumbnailCellImage-"]').first();
    const uiOptions = await page.getByTestId("button_pdm_ui_options");
    await uiOptions.click();
    const showThumbnail = await page.locator("label").filter({ hasText: "Show thumbnail" }).locator("span");
    await expect(showThumbnail).toBeVisible();
    await uiOptions.click();
    await expect(thumbnail).toBeVisible();

    // Click Flatten view
    await uiOptions.click();
    await page.getByText("Flatten view").click();

    // Verify show thumbnails are displayed
    await expect(thumbnail).toBeVisible();
    await thumbnail.first().click();
    await expect(page.getByTestId("menu-item_copy")).toBeVisible();
    await thumbnail.first().click();
    await expect(page.getByTestId("menu-item_download")).toBeVisible();

    // Delete the hardware catalog enteries generated by test
    const textValues = ["front-2", "right2-3", "right2-4", "front-4", "top-2", "top-3"];
    await hardwareCatalog.searchAndDeleteCatalogHardwareValues(textValues);
  });
  test.afterEach(async ({ page }) => {
    const b2bSaasHomePage = new homePage(page);
    if (wsId) {
      await b2bSaasHomePage.deleteWorkspaceByID(wsId);
    }
  });
});
